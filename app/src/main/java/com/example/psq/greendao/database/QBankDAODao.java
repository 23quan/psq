package com.example.psq.greendao.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.psq.greendao.dao.QBankDAO;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "QBANK_DAO".
*/
public class QBankDAODao extends AbstractDao<QBankDAO, Long> {

    public static final String TABLENAME = "QBANK_DAO";

    /**
     * Properties of entity QBankDAO.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BankId = new Property(1, String.class, "bankId", false, "BANK_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property AbstractX = new Property(3, String.class, "abstractX", false, "ABSTRACT_X");
        public final static Property Sort = new Property(4, String.class, "sort", false, "SORT");
        public final static Property Created_at = new Property(5, String.class, "created_at", false, "CREATED_AT");
        public final static Property TopicCount = new Property(6, Integer.class, "topicCount", false, "TOPIC_COUNT");
    }

    private DaoSession daoSession;


    public QBankDAODao(DaoConfig config) {
        super(config);
    }
    
    public QBankDAODao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"QBANK_DAO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BANK_ID\" TEXT," + // 1: bankId
                "\"TITLE\" TEXT," + // 2: title
                "\"ABSTRACT_X\" TEXT," + // 3: abstractX
                "\"SORT\" TEXT," + // 4: sort
                "\"CREATED_AT\" TEXT," + // 5: created_at
                "\"TOPIC_COUNT\" INTEGER);"); // 6: topicCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"QBANK_DAO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, QBankDAO entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bankId = entity.getBankId();
        if (bankId != null) {
            stmt.bindString(2, bankId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String abstractX = entity.getAbstractX();
        if (abstractX != null) {
            stmt.bindString(4, abstractX);
        }
 
        String sort = entity.getSort();
        if (sort != null) {
            stmt.bindString(5, sort);
        }
 
        String created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindString(6, created_at);
        }
 
        Integer topicCount = entity.getTopicCount();
        if (topicCount != null) {
            stmt.bindLong(7, topicCount);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, QBankDAO entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bankId = entity.getBankId();
        if (bankId != null) {
            stmt.bindString(2, bankId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String abstractX = entity.getAbstractX();
        if (abstractX != null) {
            stmt.bindString(4, abstractX);
        }
 
        String sort = entity.getSort();
        if (sort != null) {
            stmt.bindString(5, sort);
        }
 
        String created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindString(6, created_at);
        }
 
        Integer topicCount = entity.getTopicCount();
        if (topicCount != null) {
            stmt.bindLong(7, topicCount);
        }
    }

    @Override
    protected final void attachEntity(QBankDAO entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public QBankDAO readEntity(Cursor cursor, int offset) {
        QBankDAO entity = new QBankDAO( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bankId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // abstractX
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // sort
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // created_at
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // topicCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, QBankDAO entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBankId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAbstractX(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSort(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCreated_at(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTopicCount(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(QBankDAO entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(QBankDAO entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(QBankDAO entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
